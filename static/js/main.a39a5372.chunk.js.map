{"version":3,"sources":["components/PlayerCard/PlayerCard.js","components/PlayerCard/index.js","components/ShowPlayers/ShowPlayers.js","components/ShowPlayers/index.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","App.js","index.js"],"names":["PlayerCard","props","react_default","a","createElement","Card","bg","style","width","margin","onClick","playerClicked","name","updateCount","Body","Image","className","src","image","Text","temp","ShowPlayers","react","players","map","p","components_PlayerCard","key","gameLost","clicked","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandIndex","arr","Math","floor","random","length","shuffleCards","array","state","arrLength","shuffled","i","index","push","splice","checkGameOver","numClicked","setState","gameOver","gameWon","highScore","topScore","message","modalOpen","modalContent","handleClickCount","newPlayersArray","handlePlayerClicked","newPlayers","handleModalClose","playersCopy","Container","Row","Col","md","justifyContentCentered","mx","components_ShowPlayers","Modal_default","centered","show","onHide","Header","closeButton","Title","Component","App","Jumbotron","fluid","components_GameBoard","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a39a5372.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Image } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\n// PlayerCard renders an image\r\nfunction PlayerCard(props) {\r\n  const handleClick = () => {\r\n    props.playerClicked(props.name);\r\n    props.updateCount();\r\n  };\r\n\r\n  return (\r\n    <Card bg=\"info\" style={{ width: '10rem', margin: '5px auto' }} onClick={handleClick}>\r\n      <Card.Body>\r\n        <Image className=\"card-img\" src={props.image} />\r\n\r\n        <Card.Text>\r\n          <h2>{props.temp ? \"true\" : \"false\"}</h2>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PlayerCard;\r\n","import PlayerCard from './PlayerCard';\r\n\r\nexport default PlayerCard;\r\n","import React, { Fragment } from \"react\";\r\nimport PlayerCard from \"../PlayerCard\";\r\nimport \"./style.css\";\r\n\r\n// ShowPlayers renders a region for displaying cards for game\r\nfunction ShowPlayers(props) {\r\n  return (\r\n    <Fragment>\r\n      { props.players.map( (p) => {\r\n        return (\r\n          <PlayerCard\r\n            key={p.name}\r\n            name={p.name}\r\n            image={p.image}\r\n            playerClicked={props.playerClicked}\r\n            updateCount={props.updateCount}\r\n            gameLost={props.gameLost}\r\n            temp={p.clicked}\r\n          />\r\n        );\r\n      })\r\n      }\r\n  </Fragment>\r\n  );\r\n\r\n}\r\n\r\nexport default ShowPlayers;\r\n","import ShowPlayers from './ShowPlayers';\r\n\r\nexport default ShowPlayers;\r\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport ShowPlayers from \"../ShowPlayers\";\r\nimport \"./style.css\";\r\n\r\n// GameBoard renders a region for displaying cards for game\r\nclass GameBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numClicked: 0,\r\n      players: [],\r\n      gameOver: false,\r\n      gameWon: false,\r\n      topScore: 0,\r\n      modalOpen: false,\r\n      modalContent: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ players: this.props.players });\r\n  }\r\n\r\n  // return a random index number from an array\r\n  getRandIndex = arr => {\r\n    return Math.floor(Math.random() * arr.length);\r\n  };\r\n\r\n  // Shuffles the players array held in state. Returns a new array with players\r\n  // in a different order\r\n  shuffleCards = () => {\r\n    let array = this.state.players;\r\n    const arrLength = array.length;\r\n    let shuffled = [];\r\n\r\n    for (let i = 0; i < arrLength; i++) {\r\n      let index = this.getRandIndex(array);\r\n      shuffled.push(array[index]);\r\n      array.splice(index, 1);\r\n    }\r\n    return shuffled;\r\n  };\r\n\r\n  checkGameOver = () => {\r\n    if (this.state.numClicked === this.state.players.length - 1) {\r\n      this.setState({ gameOver: true, gameWon: true });\r\n    }\r\n  };\r\n\r\n  // Game Lost:\r\n  //    Set gameOver to true;\r\n  //    Set gameWon to false;\r\n  //    If game is lost, check if score is higher than previous highscore. If so, update it.\r\n  gameLost = () => {\r\n    let highScore =\r\n      this.state.numClicked > this.state.topScore\r\n        ? this.state.numClicked\r\n        : this.state.topScore;\r\n    let message = <h3 className=\"text-center\">{this.state.gameWon ? \"You Won!\" : \"You Lost!\"}</h3>;\r\n    this.setState({ gameOver: true, gameWon: false, topScore: highScore, modalOpen: true, modalContent: message });\r\n  };\r\n\r\n  handleClickCount = () => {\r\n    this.checkGameOver();\r\n    const newPlayersArray = this.shuffleCards();\r\n    this.setState({\r\n      numClicked: this.state.numClicked + 1,\r\n      players: newPlayersArray\r\n    });\r\n  };\r\n\r\n  handlePlayerClicked = name => {\r\n    let playersCopy = this.state.players;\r\n\r\n    let newPlayers = playersCopy.map(p => {\r\n      if (p.name === name) {\r\n        if (p.clicked) {\r\n          this.gameLost();\r\n        }\r\n        p.clicked = true;\r\n      }\r\n      return p;\r\n    });\r\n    this.setState({ players: newPlayers });\r\n  };\r\n\r\n  handleModalClose = () => {\r\n    let playersCopy = this.state.players;\r\n\r\n    for (let i = 0; i < playersCopy.length; i++) {\r\n      playersCopy[i].clicked = false;\r\n    }\r\n\r\n    this.setState({\r\n      modalOpen: false,\r\n      gameOver: false,\r\n      numClicked: 0,\r\n      players: playersCopy\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container >\r\n        <Row className=\"game-container\">\r\n          <Col md=\"2\" />\r\n          <Col md=\"4\">\r\n            <h3 className=\"text-center\">Clicks: {this.state.numClicked} </h3>\r\n          </Col>\r\n          <Col md=\"4\" justifyContentCentered>\r\n            <h3 className=\"text-center\">Top Score: {this.state.topScore} </h3>\r\n          </Col>\r\n        </Row>\r\n        <Col md=\"8\" mx=\"auto\" className=\"game-board\">\r\n          <ShowPlayers\r\n            players={this.state.players}\r\n            playerClicked={this.handlePlayerClicked}\r\n            updateCount={this.handleClickCount}\r\n            gameLost={this.gameLost}\r\n          />\r\n        </Col>\r\n\r\n        <Modal\r\n          centered\r\n          show={this.state.modalOpen}\r\n          onHide={this.handleModalClose}\r\n        >\r\n          <Modal.Header className=\"modal-header\" closeButton>\r\n            <Modal.Title centered>Game Over</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {this.state.modalContent}\r\n \r\n          </Modal.Body>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\nimport { Container, Jumbotron, Image} from 'react-bootstrap';\nimport players from './data/players.json';\nimport GameBoard from './components/GameBoard';\nimport \"./App.css\";\n\n\nfunction App() {\nreturn( \n  <Container>\n    <Jumbotron className=\"jumbotron my-0\" fluid>\n      <Image fluid src=\"/images/MarioCardsheader.png\"></Image>\n    </Jumbotron>\n    <GameBoard className=\"gameboard\" players={players} />\n  </Container>\n)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}