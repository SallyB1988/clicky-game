{"version":3,"sources":["components/PlayerCard/PlayerCard.js","components/PlayerCard/index.js","components/ShowPlayers/ShowPlayers.js","components/ShowPlayers/index.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","App.js","index.js"],"names":["PlayerCard","props","react_default","a","createElement","className","onClick","playerClicked","name","updateCount","alt","src","image","temp","ShowPlayers","console","log","players","react","map","p","components_PlayerCard","key","gameLost","clicked","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandIndex","arr","Math","floor","random","length","shuffleCards","array","state","arrLength","shuffled","i","index","push","splice","checkGameOver","numClicked","setState","gameOver","gameWon","highScore","topScore","handleClickCount","newPlayersArray","handlePlayerClicked","newPlayers","handleModalClose","playersCopy","components_ShowPlayers","Modal_default","show","onHide","Header","closeButton","Title","Body","Component","App","components_GameBoard","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d542b20a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// PlayerCard renders an image\r\nfunction PlayerCard(props) {\r\n\r\nconst  handleClick = () => {\r\n    props.playerClicked(props.name);\r\n    props.updateCount();\r\n  }\r\n\r\n    return (\r\n      <div className=\"card w-25 wrapper\" onClick={handleClick}>\r\n        <img className=\"card-img\" alt={props.name} src={props.image} />\r\n        <div><h2>{props.temp ? \"true\" : \"false\"}</h2></div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PlayerCard;","import PlayerCard from './PlayerCard';\r\n\r\nexport default PlayerCard;\r\n","import React, { Fragment } from \"react\";\r\nimport PlayerCard from \"../PlayerCard\";\r\n// import GameOver from \"../GameOver\";\r\nimport \"./style.css\";\r\n\r\n// ShowPlayers renders a region for displaying cards for game\r\nfunction ShowPlayers(props) {\r\n  console.log('inside shwoplayers');\r\n  console.log(props.players);\r\n  return (\r\n    <Fragment>\r\n      { props.players.map( (p) => {\r\n        return (\r\n          <PlayerCard\r\n            key={p.name}\r\n            name={p.name}\r\n            image={p.image}\r\n            playerClicked={props.playerClicked}\r\n            updateCount={props.updateCount}\r\n            gameLost={props.gameLost}\r\n            temp={p.clicked}\r\n          />\r\n        );\r\n      })\r\n      }\r\n  </Fragment>\r\n  );\r\n\r\n}\r\n\r\nexport default ShowPlayers;\r\n","import ShowPlayers from './ShowPlayers';\r\n\r\nexport default ShowPlayers;\r\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from \"react\";\r\nimport PlayerCard from \"../PlayerCard\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ShowPlayers from \"../ShowPlayers\";\r\nimport \"./style.css\";\r\n\r\n// GameBoard renders a region for displaying cards for game\r\nclass GameBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numClicked: 0,\r\n      players: [],\r\n      gameOver: false,\r\n      gameWon: false,\r\n      topScore: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ players: this.props.players });\r\n  }\r\n\r\n   // return a random index number from an array\r\n  getRandIndex = arr => {\r\n    return Math.floor(Math.random() * arr.length);\r\n  };\r\n\r\n  // Shuffles the players array held in state. Returns a new array with players\r\n  // in a different order\r\n  shuffleCards = () => {\r\n    let array = this.state.players;\r\n    const arrLength = array.length;\r\n    let shuffled = [];\r\n\r\n    for (let i = 0; i < arrLength; i++) {\r\n      let index = this.getRandIndex(array);\r\n      shuffled.push(array[index]);\r\n      array.splice(index, 1);\r\n    }\r\n    return shuffled;\r\n  };\r\n\r\n  checkGameOver = () => {\r\n    if (this.state.numClicked === this.state.players.length - 1) {\r\n      this.setState({ gameOver: true, gameWon: true });\r\n    }\r\n  };\r\n\r\n  gameLost = () => {\r\n    let highScore =\r\n      this.state.numClicked > this.state.topScore\r\n        ? this.state.numClicked\r\n        : this.state.topScore;\r\n    this.setState({ gameOver: true, gameWon: false, topScore: highScore });\r\n  };\r\n\r\n  handleClickCount = () => {\r\n    this.checkGameOver();\r\n    const newPlayersArray = this.shuffleCards();\r\n    this.setState({\r\n      numClicked: this.state.numClicked + 1,\r\n      players: newPlayersArray\r\n    });\r\n  };\r\n\r\n  handlePlayerClicked = (name) => {\r\n    let playersCopy = this.state.players;\r\n    let newPlayers = playersCopy.map( (p) => {\r\n      if (p.name === name ){\r\n        if (p.clicked) {\r\n          this.gameLost();\r\n        }\r\n        p.clicked = true;\r\n      }\r\n      return p;\r\n    })\r\n    this.setState({ players: newPlayers})\r\n  }\r\n\r\n  handleModalClose = () => {\r\n    let playersCopy = this.state.players;\r\n    console.log('old players');\r\n    console.log(playersCopy);\r\n    for (let i = 0; i < playersCopy.length; i++) {\r\n      playersCopy[i].clicked = false;\r\n    }\r\n    console.log('reset players!');\r\n    console.log(playersCopy);\r\n\r\n    this.setState({\r\n      gameOver: false,\r\n      numClicked: 0,\r\n      players: playersCopy\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12 text-center\">\r\n          <h1>Current Score: {this.state.numClicked} </h1>\r\n          <h1>Top Score: {this.state.topScore} </h1>\r\n        </div>\r\n        <div className=\"col-md-10  mx-auto game-board\">\r\n          <ShowPlayers\r\n            players={this.state.players}\r\n            playerClicked={this.handlePlayerClicked}\r\n            updateCount={this.handleClickCount}\r\n            gameLost={this.gameLost}\r\n          />\r\n        </div>\r\n\r\n        <Modal show={this.state.gameOver} onHide={this.handleModalClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Game Over</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <h3>{this.state.gameWon ? \"You Won!\" : \"You Lost!\"}</h3>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\nimport GameBoard from './components/GameBoard';\nimport players from './data/players.json';\n\nfunction App() {\n  return( \n    <div className=\"container\">\n      <GameBoard players={players} />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}