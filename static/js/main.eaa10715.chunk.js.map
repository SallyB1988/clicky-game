{"version":3,"sources":["components/PlayerCard/PlayerCard.js","components/PlayerCard/index.js","components/ShowPlayers/ShowPlayers.js","components/ShowPlayers/index.js","components/Instructions/Instructions.js","components/Instructions/index.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","App.js","index.js"],"names":["PlayerCard","props","react_default","a","createElement","Card","bg","style","width","margin","onClick","playerClicked","name","updateCount","Body","Image","className","src","image","ShowPlayers","react","players","map","p","components_PlayerCard","key","gameLost","temp","clicked","Instructions","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandIndex","arr","Math","floor","random","length","shuffleCards","array","state","arrLength","shuffled","i","index","push","splice","checkGameOver","numClicked","message","setState","gameOver","topScore","modalOpen","modalHeader","modalContent","highScore","handleClickCount","newPlayersArray","showInstructions","components_Instructions","handlePlayerClicked","newPlayers","handleModalClose","playersCopy","Container","fluid","Row","Col","md","Button","variant","justifyContentCentered","mx","components_ShowPlayers","Modal_default","centered","show","onHide","Header","closeButton","Title","Component","App","Jumbotron","components_GameBoard","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.eaa10715.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Image } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\n\r\n// PlayerCard renders an image\r\nfunction PlayerCard(props) {\r\n  const handleClick = () => {\r\n    props.playerClicked(props.name);\r\n    props.updateCount();\r\n  };\r\n\r\n  return (\r\n    <Card bg=\"info\" style={{ width: '10rem', margin: '5px auto' }} onClick={handleClick}>\r\n      <Card.Body>\r\n        <Image className=\"card-img\" src={props.image} />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PlayerCard;\r\n","import PlayerCard from './PlayerCard';\r\n\r\nexport default PlayerCard;\r\n","import React, { Fragment } from \"react\";\r\nimport PlayerCard from \"../PlayerCard\";\r\n\r\n// ShowPlayers renders a region for displaying cards for game\r\nfunction ShowPlayers(props) {\r\n  return (\r\n    <Fragment>\r\n      { props.players.map( (p) => {\r\n        return (\r\n          <PlayerCard\r\n            key={p.name}\r\n            name={p.name}\r\n            image={p.image}\r\n            playerClicked={props.playerClicked}\r\n            updateCount={props.updateCount}\r\n            gameLost={props.gameLost}\r\n            temp={p.clicked}\r\n          />\r\n        );\r\n      })\r\n      }\r\n  </Fragment>\r\n  );\r\n\r\n}\r\n\r\nexport default ShowPlayers;\r\n","import ShowPlayers from './ShowPlayers';\r\n\r\nexport default ShowPlayers;\r\n","import React from \"react\";\r\n\r\n// PlayerCard renders an image\r\nfunction Instructions() {\r\n  return (\r\n    <p>\r\n      The rules are simple... click on each player once, but ONLY once. Each\r\n      time you click a character, the characters will be shuffled. Try to click\r\n      all 12 characters without clicking any one a second time. Good luck!\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default Instructions;\r\n","import Instructions from './Instructions';\r\n\r\nexport default Instructions;\r\n","import GameBoard from './GameBoard';\r\n\r\nexport default GameBoard;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button, Row, Col, Container } from \"react-bootstrap\";\r\nimport ShowPlayers from \"../ShowPlayers\";\r\nimport Instructions from \"../Instructions\";\r\nimport \"./style.css\";\r\n\r\n// GameBoard renders a region for displaying cards for game\r\nclass GameBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numClicked: 0,\r\n      players: [],\r\n      gameOver: false,\r\n      topScore: 0,\r\n      modalOpen: false,\r\n      modalHeader: \"\",\r\n      modalContent: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ players: this.props.players });\r\n  }\r\n\r\n  // return a random index number from an array\r\n  getRandIndex = arr => {\r\n    return Math.floor(Math.random() * arr.length);\r\n  };\r\n\r\n  // Shuffles the players array held in state. Returns a new array with players\r\n  // in a different order\r\n  shuffleCards = () => {\r\n    let array = this.state.players;\r\n    const arrLength = array.length;\r\n    let shuffled = [];\r\n\r\n    for (let i = 0; i < arrLength; i++) {\r\n      let index = this.getRandIndex(array);\r\n      shuffled.push(array[index]);\r\n      array.splice(index, 1);\r\n    }\r\n    return shuffled;\r\n  };\r\n\r\n// Check Game Over -- state.numClicked has not been updated yet for \r\n//     the latest click, so if state.numClicked = #players - 1 then: \r\n//    Set gameOver to true;\r\n//    Set Modal information to dipslay message stating the player won.\r\n\r\n  checkGameOver = () => {\r\n    if (this.state.numClicked === this.state.players.length - 1) {\r\n      let message = <h3 className=\"text-center\">You Won!</h3>;\r\n\r\n      this.setState({\r\n        gameOver: true,\r\n        topScore: this.state.players.length,\r\n        modalOpen: true,\r\n        modalHeader: \"GAME OVER\",\r\n        modalContent: message\r\n      });\r\n    }\r\n  };\r\n\r\n  // Game Lost:\r\n  //    Set gameOver to true;\r\n  //    If numclicked is higher than previous highscore, update highscore.\r\n  gameLost = () => {\r\n    let highScore =\r\n      this.state.numClicked > this.state.topScore\r\n        ? this.state.numClicked\r\n        : this.state.topScore;\r\n    let message = <h3 className=\"text-center\">You Lost!</h3>;\r\n    this.setState({\r\n      gameOver: true,\r\n      topScore: highScore,\r\n      modalOpen: true,\r\n      modalHeader: \"GAME OVER\",\r\n      modalContent: message\r\n    });\r\n  };\r\n\r\n  // Each time a player is clicked:\r\n  // Check if game has been won.\r\n  // Shuffle the player cards.\r\n  // Increment the numClicked value.\r\n  handleClickCount = () => {\r\n    this.checkGameOver();\r\n    const newPlayersArray = this.shuffleCards();\r\n    this.setState({\r\n      numClicked: this.state.numClicked + 1,\r\n      players: newPlayersArray\r\n    });\r\n  };\r\n\r\n  // Opens the modal and displays the game instructions\r\n  showInstructions = () => {\r\n    this.setState({\r\n      modalHeader: \"HOW TO PLAY\",\r\n      modalContent: <Instructions />,\r\n      modalOpen: true\r\n    });\r\n  };\r\n\r\n  // When a player card is clicked, check if its clicked value is true,\r\n  // if yes, then the game is lost. If no, set the clicked value to false.\r\n  handlePlayerClicked = name => {\r\n    let playersCopy = this.state.players;\r\n\r\n    let newPlayers = playersCopy.map(p => {\r\n      if (p.name === name) {\r\n        if (p.clicked) {\r\n          this.gameLost();\r\n        }\r\n        p.clicked = true;\r\n      }\r\n      return p;\r\n    });\r\n    this.setState({ players: newPlayers });\r\n  };\r\n\r\n  // When modal closes, reset the clicked values of the players to be false.\r\n  // Start a new game.\r\n  handleModalClose = () => {\r\n    let playersCopy = this.state.players;\r\n    for (let i = 0; i < playersCopy.length; i++) {\r\n      playersCopy[i].clicked = false;\r\n    }\r\n\r\n    this.setState({\r\n      modalOpen: false,\r\n      gameOver: false,\r\n      numClicked: 0,\r\n      players: playersCopy\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Row className=\"game-container\">\r\n          <Col md=\"2\" className=\"button-bar\">\r\n            <Button\r\n              className=\"instructions\"\r\n              variant=\"warning\"\r\n              onClick={this.showInstructions}\r\n            >\r\n              Instructions\r\n            </Button>\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <h3 className=\"text-center\">Clicks: {this.state.numClicked} </h3>\r\n          </Col>\r\n          <Col md=\"4\" justifyContentCentered>\r\n            <h3 className=\"text-center\">Top Score: {this.state.topScore} </h3>\r\n          </Col>\r\n        </Row>\r\n        <Col md=\"8\" mx=\"auto\" className=\"game-board\">\r\n          <ShowPlayers\r\n            players={this.state.players}\r\n            playerClicked={this.handlePlayerClicked}\r\n            updateCount={this.handleClickCount}\r\n            gameLost={this.gameLost}\r\n          />\r\n        </Col>\r\n\r\n        <Modal\r\n          centered\r\n          show={this.state.modalOpen}\r\n          onHide={this.handleModalClose}\r\n        >\r\n          <Modal.Header className=\"modal-header\" closeButton>\r\n            <Modal.Title centered>{this.state.modalHeader}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{this.state.modalContent}</Modal.Body>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\nimport { Container, Jumbotron, Image} from 'react-bootstrap';\nimport players from './data/players.json';\nimport GameBoard from './components/GameBoard';\nimport \"./App.css\";\n\n\nfunction App() {\nreturn( \n  <Container>\n    <Jumbotron className=\"jumbotron my-0\" fluid>\n      <Image fluid src=\"images/marioCardsHeader.png\"></Image>\n    </Jumbotron>\n    <h3>HELLO</h3>\n    <GameBoard className=\"gameboard\" players={players} />\n  </Container>\n)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}